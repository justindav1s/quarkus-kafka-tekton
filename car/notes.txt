Create a Cluster with a route

apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  namespace: kafka-cluster
  entityOperator:
    topicOperator: {}
    userOperator: {}
  kafka:
    config:
      inter.broker.protocol.version: '3.0'
      log.message.format.version: '3.0'
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3
    listeners:
      - name: plain
        port: 9092
        tls: false
        type: internal
      - name: tls
        port: 9093
        tls: true
        type: internal
      - name: external
        port: 9094
        tls: true
        type: route
    replicas: 3
    storage:
      type: ephemeral
    version: 3.0.0
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral

Create a user that authenticates with tls

apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  creationTimestamp: '2022-04-25T15:02:16Z'
  generation: 1
  labels:
    strimzi.io/cluster: my-cluster
  name: kafka-user
  namespace: kafka-cluster
spec:
  authentication:
    type: tls

Useful : https://medium.com/@Opportunity-of-Learning/installation-of-strimzi-kafka-with-ssl-on-kubernetes-7b7228d6d217  

justin@Justins-MacBook-Pro Documents % oc project kafka-cluster
Already on project "kafka-cluster" on server "https://api.sno.openshiftlabs.net:6443".
justin@Justins-MacBook-Pro Documents % oc get secrets
NAME                                         TYPE                                  DATA   AGE
builder-dockercfg-8bc8q                      kubernetes.io/dockercfg               1      13d
builder-token-5ms9c                          kubernetes.io/service-account-token   4      13d
builder-token-w9q92                          kubernetes.io/service-account-token   4      13d
default-dockercfg-4dfnx                      kubernetes.io/dockercfg               1      13d
default-token-7d99k                          kubernetes.io/service-account-token   4      13d
default-token-kdc2v                          kubernetes.io/service-account-token   4      13d
deployer-dockercfg-gmhzr                     kubernetes.io/dockercfg               1      13d
deployer-token-85mpg                         kubernetes.io/service-account-token   4      13d
deployer-token-m6fkb                         kubernetes.io/service-account-token   4      13d
kafka-user                                   Opaque                                5      7m11s
my-cluster-clients-ca                        Opaque                                1      82m
my-cluster-clients-ca-cert                   Opaque                                3      82m
my-cluster-cluster-ca                        Opaque                                1      82m
my-cluster-cluster-ca-cert                   Opaque                                3      82m
my-cluster-cluster-operator-certs            Opaque                                4      82m
my-cluster-entity-operator-certs             Opaque                                4      81m
my-cluster-entity-operator-dockercfg-78zgt   kubernetes.io/dockercfg               1      81m
my-cluster-entity-operator-token-q6xgs       kubernetes.io/service-account-token   4      81m
my-cluster-entity-operator-token-zkkgr       kubernetes.io/service-account-token   4      81m
my-cluster-kafka-brokers                     Opaque                                12     82m
my-cluster-kafka-dockercfg-xm8bz             kubernetes.io/dockercfg               1      82m
my-cluster-kafka-token-p499m                 kubernetes.io/service-account-token   4      82m
my-cluster-kafka-token-r2x5m                 kubernetes.io/service-account-token   4      82m
my-cluster-zookeeper-dockercfg-w6zwv         kubernetes.io/dockercfg               1      82m
my-cluster-zookeeper-nodes                   Opaque                                12     82m
my-cluster-zookeeper-token-8hp46             kubernetes.io/service-account-token   4      82m
my-cluster-zookeeper-token-f2khp             kubernetes.io/service-account-token   4      82m



oc get secret my-cluster-cluster-ca-cert -n kafka-cluster -o jsonpath='{.data.ca\.crt}' | base64 --decode > ca.crt

oc get secret kafka-user -n kafka-cluster -o jsonpath='{.data.user\.p12}' | base64 --decode > user.p12
oc get secret kafka-user -n kafka-cluster -o jsonpath='{.data.user\.password}' | base64 --decode > user.password
export PASSWORD=`cat user.password`
keytool -import -trustcacerts -file ca.crt -keystore user-truststore.jks -storepass $PASSWORD
keytool -importkeystore -srckeystore user.p12 -srcstoretype pkcs12 -destkeystore user-keystore.jks -deststoretype jks


https://github.com/quarkusio/quarkus/blob/main/integration-tests/kafka-streams/src/main/resources/application.properties